# This AWS SAM template has been generated from your function's configuration. If
# your function has one or more triggers, note that the AWS resources associated
# with these triggers aren't fully specified in this template and include
# placeholder values. Open this template in AWS Application Composer or your
# favorite IDE and modify it to specify a serverless application with other AWS
# resources.
AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: An AWS Serverless Application Model template describing your function.
Parameters:
  Repository:
    Type: String
    Description: The GitHub repository to deploy the frontend to

Resources:
  GenerateResponse:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./src/generate_response/
      Description: ''
      MemorySize: 128
      Timeout: 900
      Handler: lambda_function.lambda_handler
      Runtime: python3.11
      Architectures:
        - x86_64
      EphemeralStorage:
        Size: 512
      EventInvokeConfig:
        MaximumEventAgeInSeconds: 21600
        MaximumRetryAttempts: 2
      PackageType: Zip
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - logs:CreateLogGroup
              Resource: arn:aws:logs:us-west-2:360400205813:*
            - Effect: Allow
              Action:
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource:
                - arn:aws:logs:us-west-2:360400205813:log-group:/aws/lambda/GenerateResponse:*
      SnapStart:
        ApplyOn: None
      RuntimeManagementConfig:
        UpdateRuntimeOn: Auto
      Events:
        TruthSeekerRestApiPOSTgenerateresponsequery:
          Type: Api
          Properties:
            Path: /generate_response/{query}
            Method: POST
            RestApiId: !Ref TruthSeekerRestApi
  TruthSeekerRestApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub
        - ${ResourceName}
        - ResourceName: TruthSeekerRestApi
      StageName: dev
      DefinitionBody:
        openapi: '3.0'
        info: {}
        paths:
          /generate_response/{query}:
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GenerateResponse.Arn}/invocations
              responses: {}
          /health:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${HealthCheck.Arn}/invocations
              responses: {}
      EndpointConfiguration: REGIONAL
      TracingEnabled: true
      Cors:
        MaxAge: 5
  HealthCheck:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: HealthCheck
      CodeUri: ./src/health_check
      Handler: handler.handler
      Runtime: python3.11
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Events:
        TruthSeekerRestApiGEThealth:
          Type: Api
          Properties:
            Path: /health
            Method: GET
            RestApiId: !Ref TruthSeekerRestApi
  HealthCheckLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/lambda/${HealthCheck}

  TruthSeekerAmplifyApp:
    Type: AWS::Amplify::App
    Properties:
      Name: !Sub "${AWS::StackName}-${AWS::Region}-${AWS::AccountId}"
      Repository: !Ref Repository
      BuildSpec: |
        version: 1
        applications:
          - frontend:
              phases:
                preBuild:
                  commands:
                    - npm ci
                build:
                  commands:
                    - npm run build
              artifacts:
                baseDirectory: dist
                files:
                  - '**/*'
              cache:
                paths:
                  - node_modules/**/*
            appRoot: frontend
      AccessToken: "{{resolve:secretsmanager:truth-seeker-github-token}}"
      EnvironmentVariables:
        - Name: AMPLIFY_MONOREPO_APP_ROOT
          Value: frontend
        - Name: VITE_REGION
          Value: !Ref AWS::Region
        - Name: VITE_API_ENDPOINT
          Value: !Sub "https://${TruthSeekerRestApi}.execute-api.${AWS::Region}.${AWS::URLSuffix}/dev/"

  AmplifyBranch:
    Type: AWS::Amplify::Branch
    Properties:
      BranchName: main
      AppId: !GetAtt TruthSeekerAmplifyApp.AppId
      EnableAutoBuild: true


Metadata:
  AWS::Composer::Groups:
    Group:
      Label: API
      Members:
        - GenerateResponse
        - HealthCheck

Outputs:
  ApiGatewayBaseUrl:
    Value: !Sub "https://${TruthSeekerRestApi}.execute-api.${AWS::Region}.${AWS::URLSuffix}/dev/"